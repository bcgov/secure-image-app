# This workflow is triggered when code is pushed to the master branch where there was a change in the ios folder 
# This workflow runs on macOS operating system and has a timeout of 200 minutes
name: Archive and Export ipa
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - ios/**/*
      
jobs:
  deploy:
    name: Archiving and exporting ipa
    runs-on: macOS-latest # Update macOS version here if needed
      
    timeout-minutes: 200 # Workflow timeout in minutes
    
    steps:
      # Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v1
#     - name: Switch XCode Version
#       run: sudo xcode-select -s /Applications/Xcode_12.4.app
      # xcpretty helps us see more useful logs when running the Xcode commands
      - name: Install xcpretty
        run: gem install xcpretty
      # Cocoapods is a dependency manager for iOS
      - name: Install Cocoapods
        run: sudo gem install cocoapods
      - name: Import code-signing certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with: 
          p12-file-base64: ${{ secrets.APPLE_ENTERPRISE_BUILD_CERTIFICATE_BASE_64 }}
          p12-password: ${{ secrets.APPLE_ENTERPRISE_BUILD_CERTIFICATE_PASSWORD }}
      - name: Install provisioning profile
        env:
          IOS_PROVISIONING_PROFILE_BASE_64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE_64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision

          echo -n "$IOS_PROVISIONING_PROFILE_BASE_64" | base64 --decode -o $PP_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Verify installed secrets
        run: security find-identity -vp codesigning
      # instelling dependencies with cocoapods
      - name: Install dependencies
        run: cd $PWD/ios/ && pod install
      # Archiving iOS project
      # creates SecureImage.xcarchive file 
      - name: Archive project
        env:
          PR_NUMBER: $(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
        run: ./.github/scripts/archive_ios.sh
      # exports the archived project and create the .ipa app file
      # here we use the specification in ios/exportOptions-adhoc.plist file to describe how the code is signed and should be exported.
      - name: Export .ipa
        run: ./.github/scripts/export_ios_ipa.sh
      # uploads the generated .ipa file to a gov-hosted Artifactory instance
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_PROJECT: ${{ vars.ARTIFACTORY_PROJECT }}
          JF_URL: ${{ vars.ARTIFACTORY_URL }}
          JF_USER: ${{ secrets.ARTIFACTORY_SERVICE_ACCOUNT_USER }}
          JF_PASSWORD: ${{ secrets.ARTIFACTORY_SERVICE_ACCOUNT_PWD }}
      - name: Push build to Artifactory
        run: |
          export JFROG_CLI_LOG_LEVEL=DEBUG
          jf rt upload build/Apps/SecureImage.ipa "${{ vars.ARTIFACTORY_REPO_NAME }}/SecureImage-ios-${{ github.run_number }}.ipa"
          
