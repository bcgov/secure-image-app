# Copyright 2020 The Province of British Columbia
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: |
      Deployment template for the Platform Serices
      project registry.
    iconClass: icon-node
  name: platform-services-registry
objects:
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${API_NAME}
    name: ${API_NAME}
  spec:
    path: ""
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${API_NAME}
      weight: 100
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${API_NAME}
    name: ${MINIO_VOLUME_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${MINIO_VOLUME_CAPACITY}
    storageClassName: netapp-file-standard
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the minio server
    labels:
      app: ${API_NAME}
    name: ${MINIO_DEPLOYMENT_NAME}
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      deploymentconfig: ${MINIO_DEPLOYMENT_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${API_NAME}
    name: ${API_NAME}
  spec:
    selector:
      deploymentconfig: ${API_NAME}
    ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${API_NAME}
    annotations:
      description: Defines how to deploy the minio server
    name: ${MINIO_DEPLOYMENT_NAME}
  spec:
    replicas: 1
    selector:
      app: minio
      deploymentconfig: ${MINIO_DEPLOYMENT_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: minio
          role: minio
          deploymentconfig: ${MINIO_DEPLOYMENT_NAME}
      spec:
        containers:
        - env:
          - name: MINIO_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: accessKey
                name: ${MINIO_SECRET_NAME}
          - name: MINIO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secretKey
                name: ${MINIO_SECRET_NAME}
          - name: MINIO_CONFIG_DIR
            value: /tmp
          - name: MINIO_DATA_DIR
            value: /data
          image: docker-registry.default.svc:5000/openshift/minio:latest
          imagePullPolicy: Always
          name: ${MINIO_DEPLOYMENT_NAME}
          ports:
          - containerPort: 9000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: minio-vol
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: minio-vol
          persistentVolumeClaim:
            claimName: ${MINIO_VOLUME_NAME}
    test: false
    triggers:
    - type: ConfigChange
    # - imageChangeParams:
    #     automatic: true
    #     containerNames:
    #     - minio
    #     from:
    #       kind: ImageStreamTag
    #       name: minio:latest
    #       namespace: openshift
    #   type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${API_NAME}
    name: ${API_NAME}
  spec:
    strategy:
      type: Rolling
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${API_NAME}
          from:
            kind: ImageStreamTag
            name: ${SOURCE_IMAGE_NAME}:${SOURCE_IMAGE_TAG}
            namespace: ${SOURCE_IMAGE_NAMESPACE}
    replicas: 1
    selector:
      deploymentconfig: ${API_NAME}
    template:
      metadata:
        labels:
          app: ${API_NAME}
          role: api
          deploymentconfig: ${API_NAME}
        name: ${API_NAME}
      spec:
        containers:
          - name: ${API_NAME}
            image: " "
            imagePullPolicy: Always
            readinessProbe:
              httpGet:
                path: /api/v1/ehlo
                port: 8080
              initialDelaySeconds: 10
              timeoutSeconds: 3
            ports:
              - containerPort: 8080
            env:
              - name: MINIO_ENDPOINT
                value: ${MINIO_DEPLOYMENT_NAME}.${NAMESPACE}.svc
              - name: MINIO_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    key: accessKey
                    name: ${MINIO_SECRET_NAME}
              - name: MINIO_SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    key: secretKey
                    name: ${MINIO_SECRET_NAME}
              - name: SESSION_SECRET
                valueFrom:
                  secretKeyRef:
                    key: sessionSecret
                    name: ${SESSION_SECRET_NAME}
              - name: SSO_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    key: secret
                    name: ${SSO_SECRET_NAME}
              - name: PORT
                value: "8080"
              - name: NODE_ENV
                value: ${NODE_ENV}
              - name: APP_URL
                value: https://${API_DEPLOYMENT_NAME}-${NAMESPACE}.pathfinder.gov.bc.ca
            resources:
              limits:
                cpu: 300m
                memory: 512Mi
              requests:
                cpu: 200m
                memory: 92Mi
            volumeMounts:
              - name: config-vol
                mountPath: /opt/app-root/src/build/config/config.json
                subPath: config.json
        volumes:
          - name: config-vol
            configMap:
              name: ${API_NAME}-config
parameters:
  - description: The name assigned to all of the objects defined in this template.  You
      should keep this as default unless your know what your doing.
    displayName: Name
    name: API_NAME
    required: true
    value: secure-image-api
  - description: The namespace of the OpenShift project containing the imagestream for
      the application.
    displayName: Environment namespace
    name: NAMESPACE
    required: true
  - description: |
      The name of the secret containing the MINIO credentials.
    displayName: Minio Secret Name
    name: MINIO_SECRET_NAME
    value: minio
  - description: The name given to the minio instance deployment.
    displayName: Minio deployment name
    name: MINIO_DEPLOYMENT_NAME
    required: true
    value: minio
  - displayName: Name of the minio storage PV
    name: MINIO_VOLUME_NAME
    required: true
    value: minio-data
  - displayName: Size of minio storage PV in Gi
    from: '[0-9]{3}Gi'
    name: MINIO_VOLUME_CAPACITY
    required: true
  - description: The openshift project where builds and target images are stored.
    displayName: Build Project
    name: SOURCE_IMAGE_NAMESPACE
    required: true
  - description: The name of the source image.
    displayName: Source Image Name
    name: SOURCE_IMAGE_NAME
    value: secure-image-api
    required: true
  - description: The tag of the source image.
    displayName: Source Image Tag
    name: SOURCE_IMAGE_TAG
    required: true
  - description: |
      The name of the session secret used by the express framework in
      the API.
    displayName: Session Secret Name
    name: SESSION_SECRET_NAME
    value: api-session
  - description: |
      The name of the shared secret the API uses to to interact
      with SSO.
    displayName: SSO Secret Name
    name: SSO_SECRET_NAME
    value: sso-client
  - description: |
      This parameter sets the nodejs run-time environment variable.
    displayName: Node Environment
    name: NODE_ENV
    value: produciton
